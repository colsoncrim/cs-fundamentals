1. Write pseudocode for bubble sort.

  swapped = true
  while swapped
    swapped = false
    for j from 0 to N - 1
      if a[j] > a[j + 1]
        swap( a[j], a[j + 1] )
        swapped = true



    2. Write pseudocode for quicksort.

  Quicksort(a, low, high) {
    if (low < high) {
      pivot_location = Partition(a, low, high)
      Quicksort(a, low, pivot_location)
      Quicksort(a, pivot_location + 1, high)
    }
  }

  Partition(a, low, high) {
    pivot = a[low]
    leftwall = low

    for i = low + 1 to high {
      if (a[i] < pivot) then {
        swap(a[i], a[leftwall + 1])
        leftwall = leftwall + 1
      }
    }
    swap(pivot, a[leftwall])

    return (leftwall)
  }



3. We talked about time complexity in a previous checkpoint, and how to get an idea
   of the efficiency of an algorithm. After looking at the pseudocode for the above
   sorting methods, identify why merge sort and quick sort are much more efficient
   than the others. Walking through each algorithm with a few sample collections may
   help.

   Quick sort is considered the best sorting algorithm. The time complexity of quick
   sort is O(n log n) in the best case, and O(n^2) in the worst case. It has the
   best performance in the average case for most inputs, therefore it is the most
   efficient.

   The time complexity of merge sort is O(n log n), which is the same as quick sort.
   However, merge sort uses extra space, and quick sort requires little space.

   Both quick sort and merge sort are more efficient than the other sorting methods
   in this checkpoint because they are better at handling large, advanced lists, and
   run much more efficiently when presented with nested for/while loops.



4. All of the sorts addressed in this checkpoint are known as comparison sorts.
   Research bucket sort and explain how it works. What is the ideal input for bucket
   sort?

   Bucket sort is a sorting algorithm that works by distributing the elements of an
   array into a number of buckets. Each bucket is then sorted individually either using
   a different sorting algorithm, or by recursively applying the bucket sorting
   algorithm. It is mainly useful when input is uniformly distributed over a range.
