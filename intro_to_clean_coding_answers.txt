1) In your own words, explain what clean code is and why it is important.
      Clean code is code that is written in a "clean" fashion, meaning that it can be read easily, and can be easily maintained by other developers.
      In addition to the reasons written above, clean code can be important when working with others on large, complex application. If your code has strange
      naming conventions, or is not easily interpreted without a lot of comments, then your code probably isn't considered clean.



2) Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed,
   think about another commonly used object that relies on computers and explain what would happen if the code was not created
   to an acceptable standard.
      Another commonly used object that relies on computers in order to operate would be an industrial robot. Commonly used as assemblers for car manufacturing,
      industrial robots are programmed to do all sorts of tasks in a manufacturing environment. If the code that is controlling these robots' every move
      contains bugs or is defective in any way, it could lead to serious injuries or fatalities in the workplace.



3) Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.
      I do consider this to be clean code. It is a simple and clear if/else statement that checks if the temperature is to be displayed as fahrenheit or celsius. I don't
      see how you could write it any more specific or clean.


4) Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.
      This is another simple and cleanly written chunk of code. It is a function that calculates the percentage of a number. If the number is equal to zero,
      it returns "Sorry, cannot divide by 0". It's straight forward and there are not a lot of moving parts.


5) Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.


a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

    FUNCTION checkOutCustomer(subTotal, discountRate)

      PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

      END FUNCTION


    FUNCTION payment(paymentType)

      IF paymentType = 'CASH' THEN

        CALL getPayment RETURNING amount

        PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)

      ELSE IF paymentType = 'CREDIT CARD' THEN

        CALL getPayment RETURNING amount

        PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)

      END IF

      END FUNCTION

b. The following function checks out a book if there are no issues with the guest's account.

      FUNCTION checkoutBook(book, guest)

          IF guest.accountActive AND (guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN

            IF APPEND book to guest.books AND SET book.status to "Checked Out" THEN

            PRINT "Your books have been issued."

          END IF

        END IF

      ELSE
            PRINT "Unable to check out book."

      END FUNCTION

c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

    CLASS Balance

      FUNCTION displayBalance

        PRINT balance

      END FUNCTION

    END CLASS


    CLASS Deposit

      FUNCTION displayDeposit(amount)

        SET balance to balance + amount

      END FUNCTION

    END CLASS


    CLASS Withdraw

      FUNCTION displayWithdraw(amount)

        IF balance > amount THEN

          SET balance to balance - amount

        END

      END FUNCTION

    END CLASS


    CLASS Credit

      FUNCTION creditCardOffer

        IF NOT(customer.hasCreditCard) THEN

          CALL creditCardOffer

        END

      END FUNCTION

    END CLASS


    CLASS Status

      FUNCTION checkStatus

        IF NOT(customer.hasCheckingAccount) THEN

          CALL offerCheckingAccount

        END

      END FUNCTION

    END CLASS


Programming Questions:

6) Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square,
   return the square root, otherwise return the sum.

   var sum = [10,1,4,6,1,1,2].reduce(add, 0);

   function add(a, b) {
      return a+b;
   }

   console.log(sum);


   function square(sum) {
      if (sum % Math.sqrt(sum) === 0) {
        return Math.sqrt(sum);
      }
      else {
        return sum;
      }
   }


7) Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return
   true if any value appears at least twice in the array, and false if every element is distinct.


  var duplicateCheck = function(array) {
    for (i = 0; i < array.length; i++) {
      for(var j = i; j <= array.length; j++) {
        if (i != j && array[i] == array[j]) {
          return true;
        }
      }
    }
    return false;
  }
