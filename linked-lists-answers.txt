1) What are some pros and cons of using linked lists instead of arrays?

    Pros: Linked lists take up less of the available memory because each node is independent in memory. Linked lists can
    easily grow to large sizes without the operating system having to rearrange the physical memory space to make room for them.


    Cons: Trying to access a node can be inefficient because each node may exist anywhere in the memory. To access, the program
          must start at the the head and move its way through the list one by one until it arrives at the desired node.


2) Come up with a real world example of a linked list.

    Searching for an item in a grocery store. You begin your search at the store entrance and make your way through until
    you find the items you need.


Programming Questions:



1) The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for
a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and
a functional implementation of the method.


    This push function only works if the list contains one node. If the list contains more than one node, it will not work.

    FUNCTION push(element)
      CREATE node
      SET node.value TO element
      SET node.next TO null

      IF head node is absent
        THEN SET head to node
      ELSE
        SET current to head
      END IF

      SET count to zero
      WHILE current.next is NOT null
        current = current.next
        INCREMENT count
      END WHILE
      SET current.next to node
      END FUNCTION




2) Given an unsorted singly linked list, remove all duplicates from the linked list.

function LinkedList() {
    this._head = null;
    this._size =  0;
}

LinkedList.prototype = {
    createNode: function(val) {
        return {
            data: val,
            next: null
        }
    },
    addToTail: function(val) {
        var current,
        newNode = this.createNode(val);
        if(this._head == null) {
            this._head = newNode;
        }
        else {
            current = this._head;
            while(current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
        this._size++;
    },
    removeDuplicates: function() {
        prev = this._head;
        current = this._head.next;
        hash = {};
        while(current != null) {
            if(!hash[current.data]) {
                hash[current.data] = true;
            } else {
                prev.next = current.next;
                this._size--;
            }
            prev = current;
            current = current.next;
        }
    }
}


3) Given an unsorted singly linked list, reverse it.

function LinkedListNode(value) {
  this.value = value;
  this.next = null;
}

function reverse(head) {
  if (!head || !head.next) {
    return head;
  }
  let tmp = reverse(head.next);
  head.next.next = head;
  head.next = undefined;
  return tmp;
}
